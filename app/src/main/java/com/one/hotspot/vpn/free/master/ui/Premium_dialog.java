package com.one.hotspot.vpn.free.master.ui;import android.annotation.SuppressLint;import android.app.Activity;import android.app.Dialog;import android.app.ProgressDialog;import android.content.ActivityNotFoundException;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.net.Uri;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import androidx.core.content.ContextCompat;import androidx.viewpager.widget.ViewPager;import com.google.android.gms.ads.AdRequest;import com.google.android.gms.ads.MobileAds;import com.google.android.gms.ads.reward.RewardItem;import com.google.android.gms.ads.reward.RewardedVideoAd;import com.google.android.gms.ads.reward.RewardedVideoAdListener;import com.one.hotspot.vpn.free.master.DataManager;import com.one.hotspot.vpn.free.master.R;import com.one.hotspot.vpn.free.master.adapter.images_viewpager;import com.android.billingclient.api.AcknowledgePurchaseParams;import com.android.billingclient.api.AcknowledgePurchaseResponseListener;import com.android.billingclient.api.BillingClient;import com.android.billingclient.api.BillingClientStateListener;import com.android.billingclient.api.BillingFlowParams;import com.android.billingclient.api.BillingResult;import com.android.billingclient.api.Purchase;import com.android.billingclient.api.SkuDetails;import com.android.billingclient.api.SkuDetailsParams;import com.tbuonomo.viewpagerdotsindicator.SpringDotsIndicator;import org.jetbrains.annotations.NotNull;import java.util.ArrayList;import java.util.List;import java.util.Objects;import java.util.Timer;import java.util.TimerTask;import static android.content.Context.MODE_PRIVATE;public class Premium_dialog extends Dialog implements View.OnClickListener {	ViewPager viewPager;	SpringDotsIndicator dotsIndicator;	LinearLayout mPremiumLowBtn;	LinearLayout mPremiumMiddleBtn;	LinearLayout mPremiumHighBtn;	boolean payment_status;	ImageView mCloseBtn;	TextView terms_page,restore;	Button premium_btn,freetrial_subs;	Activity contexts;	TextView third,thirdmonth,twelveemonth ,    twelveeemonth,fourthmonth,fourth;	String click_box = "";	private static String TAG = Premium.class.getSimpleName().concat(":SUBS");	private BillingClient mBillingClient;	SharedPreferences payment_status_preference;	private SkuDetails weeklySub;	private SkuDetails monthlySub;	private SkuDetails yearlySub;	AdRequest rewardrequest;	RewardedVideoAd mAd;	public Premium_dialog(Activity context, int themeResId) {		super(context, themeResId );		contexts = context;	}	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.premium);		payment_status_preference = contexts.getSharedPreferences("DATA", MODE_PRIVATE);		viewPager = findViewById(R.id.viewPager);		dotsIndicator = findViewById(R.id.spring_dots_indicator);		mPremiumLowBtn = findViewById(R.id.premium_low);		mPremiumMiddleBtn = findViewById(R.id.premium_mid);		mPremiumHighBtn = findViewById(R.id.premium_high);		mCloseBtn = findViewById(R.id.premium_close_btn);		restore= findViewById(R.id.restore);		premium_btn = findViewById(R.id.premium);		terms_page= findViewById(R.id.terms_page);		freetrial_subs= findViewById(R.id.freetrial);		mAd = MobileAds.getRewardedVideoAdInstance(contexts);		third= findViewById(R.id.third);		thirdmonth= findViewById(R.id.thirdmonth);		twelveemonth= findViewById(R.id.twelveemonth);		twelveeemonth= findViewById(R.id.twelveeemonth);		fourthmonth= findViewById(R.id.fourthmonth);		fourth= findViewById(R.id.fourth);		loadRewardedVideoAd();		terms_page.setOnClickListener(v -> {			if (contexts != null) {				try {					contexts.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("your link")));				} catch (ActivityNotFoundException ex) {					viewtermsBrowser(contexts, "https://play.google.com/store/apps/details?id=" + contexts.getPackageName());				}			}		});		restore.setOnClickListener(v -> isUserHasSubscription_premium());		mPremiumLowBtn.setOnClickListener(this);		mPremiumMiddleBtn.setOnClickListener(this);		mPremiumHighBtn.setOnClickListener(this);		mCloseBtn.setOnClickListener(this);		premium_btn.setOnClickListener(this);		freetrial_subs.setOnClickListener(this);		if (contexts!=null)		{			images_viewpager imagesviewpager = new images_viewpager(contexts);			viewPager.setAdapter(imagesviewpager);			dotsIndicator.setViewPager(viewPager);			viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {				@Override				public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {				}				@Override				public void onPageSelected(int position) {				}				@Override				public void onPageScrollStateChanged(int state) {				}			});			//google billing work..!!			mBillingClient = BillingClient.newBuilder(contexts)					.setListener((billingResult, purchases) -> {						// To be implemented in a later section.						if (billingResult.getResponseCode() ==								BillingClient.BillingResponseCode.OK && purchases != null) {							for (Purchase purchase : purchases) {								handlePurchase(purchase);							}						} else if (billingResult.getResponseCode() ==								BillingClient.BillingResponseCode.USER_CANCELED) {						} else {						}					})					.enablePendingPurchases()					.build();			mBillingClient.startConnection(new BillingClientStateListener() {				@Override				public void onBillingSetupFinished(@NotNull BillingResult billingResult) {					if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK)						getProducts();						set_prices_item();				}				@Override				public void onBillingServiceDisconnected() {					Log.d(TAG, "onBillingServiceDisconnected");				}			});		}	}	public void watchad(){		if (mAd.isLoaded()) {			mAd.show();		}else {			Toast.makeText(contexts, "AD is Not Loaded, Please try Later", Toast.LENGTH_SHORT).show();			loadRewardedVideoAd();		}		mAd.setRewardedVideoAdListener(new RewardedVideoAdListener() {			@Override			public void onRewardedVideoAdLoaded() {			}			@Override			public void onRewardedVideoAdOpened() {			}			@Override			public void onRewardedVideoStarted() {			}			@Override			public void onRewardedVideoAdClosed() {				loadRewardedVideoAd();			}			@Override			public void onRewarded(RewardItem rewardItem) {				Toast.makeText(contexts, "Congratulations you got Premium Server!", Toast.LENGTH_SHORT).show();					DataManager.ADMOB_ENABLE=false;				DataManager.free_or_paid=true;				startOneHour();			}			@Override			public void onRewardedVideoAdLeftApplication() {			}			@Override			public void onRewardedVideoAdFailedToLoad(int i) {			}			@Override			public void onRewardedVideoCompleted() {				Toast.makeText(contexts, "Congratulations you got Premium Server!", Toast.LENGTH_SHORT).show();				loadRewardedVideoAd();				DataManager.ADMOB_ENABLE=false;				DataManager.free_or_paid=true;				startOneHour();			}		});	}	@SuppressLint("SetTextI18n")	private void set_prices_item() {		Log.d(TAG, "getProducts");		final List<String> skuList_set_price = new ArrayList<>();		skuList_set_price.add("1week_nofreetrial");		skuList_set_price.add("1month_nofreetrial");		skuList_set_price.add("1year_nofreetrial");		SkuDetailsParams params_prices = SkuDetailsParams.newBuilder()				.setSkusList(skuList_set_price)				.setType(BillingClient.SkuType.SUBS)				.build();		mBillingClient.querySkuDetailsAsync(params_prices,				(billingResult, skuDetailsList) -> {					if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK && skuDetailsList != null) {						if (!skuDetailsList.isEmpty()) {							for (SkuDetails skuDetails : skuDetailsList) {								switch (skuDetails.getSku()) {									case "1week_nofreetrial":										weeklySub = skuDetails;										break;									case "1month_nofreetrial":										monthlySub = skuDetails;										break;									case "1year_nofreetrial":										yearlySub = skuDetails;										break;								}								if (monthlySub!=null &&yearlySub!=null && weeklySub!=null)								{									Log.d("All_Prices",    "  " +monthlySub.getPrice()      + "     " + yearlySub.getPrice()   +"     " +weeklySub.getPrice());									twelveemonth.setText("" + yearlySub.getPrice());									thirdmonth.setText("" + monthlySub.getPrice());									third.setText("" + weeklySub.getPrice());									twelveeemonth.setText(" "+yearlySub.getPrice()+"/"+"mo");									fourthmonth.setText(" "+ monthlySub.getPrice()+"/"+"mo");									fourth.setText(" "+ weeklySub.getPrice()+"/"+"wk");								}							}						}					} else {						if (contexts != null) {							Toast.makeText(contexts, "Error in retrieving " + "products from store", Toast.LENGTH_SHORT).show();						}					}				});	}	private void isUserHasSubscription_premium()	{		if (mBillingClient == null) {			mBillingClient = BillingClient.newBuilder(contexts)					.enablePendingPurchases()					.build();		}		mBillingClient.startConnection(new BillingClientStateListener() {			@Override			public void onBillingSetupFinished(@NotNull BillingResult billingResult) {				Purchase.PurchasesResult purchasesResult=mBillingClient.queryPurchases(BillingClient.SkuType.SUBS);				mBillingClient.queryPurchaseHistoryAsync(BillingClient.SkuType.SUBS,(billingResult1, list) -> {					if (billingResult1.getResponseCode() == BillingClient.BillingResponseCode.OK &&							!Objects.requireNonNull(purchasesResult.getPurchasesList()).isEmpty()) {						DataManager.free_or_paid=true;						DataManager.ADMOB_ENABLE=false;						Toast.makeText(contexts, "Already Subscribed", Toast.LENGTH_SHORT).show();					} else {						Toast.makeText(contexts, "No Subscription", Toast.LENGTH_SHORT).show();					}				});			}			@Override			public void onBillingServiceDisconnected() {					Log.d("billingprocess","onBillingServiceDisconnected");			}		});	}	private void startOneHour() {		Timer timer = new Timer();		timer.schedule(new TimerTask() {			@Override			public void run() {				DataManager.ADMOB_ENABLE=true;				DataManager.free_or_paid=false;			}		}, 3600000 );	}	public  void viewtermsBrowser(Context context, String url) {		Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));		if (context!=null)		{			if ( intent.resolveActivity(context.getPackageManager())!=null)			{				context.startActivity(intent);			}		}	}	private void getProducts() {		Log.d(TAG, "getProducts");		final List<String> skuList = new ArrayList<>();		skuList.add("1week");		skuList.add("1week_nofreetrial");		skuList.add("1month");		skuList.add("1month_nofreetrial");		skuList.add("1year");		skuList.add("1year_nofreetrial");		SkuDetailsParams params = SkuDetailsParams.newBuilder()				.setSkusList(skuList)				.setType(BillingClient.SkuType.SUBS)				.build();		mBillingClient.querySkuDetailsAsync(params,				(billingResult, skuDetailsList) -> {					if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK							&& skuDetailsList != null) {						if (!skuDetailsList.isEmpty()) {							for (SkuDetails skuDetails : skuDetailsList) {								switch (skuDetails.getSku()) {									case "1week_nofreetrial":										weeklySub = skuDetails;										break;									case "1month_nofreetrial":										monthlySub = skuDetails;										break;									case "1year_nofreetrial":										yearlySub = skuDetails;										break;								}							}						}					} else {						if (contexts!=null)						{							Toast.makeText(contexts, "Error in retrieving " + "products from store", Toast.LENGTH_SHORT).show();						}					}				});	}	private void handlePurchase(Purchase purchase) {		if (purchase.getPurchaseState() == Purchase.PurchaseState.PURCHASED) {			AcknowledgePurchaseResponseListener acknowledgePurchaseResponseListener =					billingResult -> {							if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK)						{							payment_status = true;							SharedPreferences.Editor editor = payment_status_preference.edit();							if (editor != null) {								editor.putBoolean("payment_status", payment_status).apply();							}							DataManager.free_or_paid=true;							DataManager.ADMOB_ENABLE=false;							Log.d("Heree" , "aa");							dismiss();						}						else						{							Log.d("No_Payment_Achieved" , "no_subs");							if (payment_status_preference != null) {								SharedPreferences.Editor editor = payment_status_preference.edit();								if (editor != null) {									editor.putBoolean("payment_status", false).apply();									DataManager.free_or_paid = false;								}							}						}					};			if (!purchase.isAcknowledged()) {				AcknowledgePurchaseParams acknowledgePurchaseParams =						AcknowledgePurchaseParams.newBuilder()								.setPurchaseToken(purchase.getPurchaseToken())								.build();				mBillingClient.acknowledgePurchase(acknowledgePurchaseParams, acknowledgePurchaseResponseListener);				Log.d("Heree22" , "aa");			}		}	}	private void loadRewardedVideoAd() {							rewardrequest = new AdRequest.Builder().build();							mAd.loadAd("ca-app-pub-3940256099942544/5224354917", rewardrequest);							if (mAd.isLoaded()) {								mAd.show();							}	}	@Override	public void onClick(View view) {		if (contexts!=null)		{			switch (view.getId()) {				case R.id.premium_low:					mPremiumLowBtn.setBackground(null);					mPremiumMiddleBtn.setBackground(null);					mPremiumHighBtn.setBackground(null);					mPremiumLowBtn.setBackground(ContextCompat.getDrawable(contexts,							R.drawable.shape_premium_left));					click_box = "premium_low";					break;				case R.id.premium_mid:					mPremiumLowBtn.setBackground(null);					mPremiumMiddleBtn.setBackground(null);					mPremiumHighBtn.setBackground(null);					mPremiumMiddleBtn.setBackground(ContextCompat.getDrawable(contexts, R.drawable.shape_premium_middle));					click_box = "premium_mid";					break;				case R.id.premium_high:					mPremiumLowBtn.setBackground(null);					mPremiumMiddleBtn.setBackground(null);					mPremiumHighBtn.setBackground(null);					mPremiumHighBtn.setBackground(ContextCompat.getDrawable(contexts, R.drawable.shape_premium_right));					click_box="premium_high";					break;				case  R.id.premium:					if (click_box.equals("premium_low")) {						if (weeklySub != null) {							BillingFlowParams billingFlowParams = BillingFlowParams.newBuilder()									.setSkuDetails(weeklySub)									.build();							int responseCode = mBillingClient.launchBillingFlow(contexts, billingFlowParams).getResponseCode();							if (responseCode != BillingClient.BillingResponseCode.OK)								Toast.makeText(contexts, "Error", Toast.LENGTH_SHORT).show();						} else							Toast.makeText(contexts, "Error", Toast.LENGTH_SHORT).show();					} else if (click_box.equals("premium_mid")) {						if (monthlySub != null) {							BillingFlowParams billingFlowParams = BillingFlowParams.newBuilder()									.setSkuDetails(monthlySub)									.build();							int responseCode = mBillingClient.launchBillingFlow(contexts, billingFlowParams).getResponseCode();							if (responseCode != BillingClient.BillingResponseCode.OK)								Toast.makeText(contexts, "Error", Toast.LENGTH_SHORT).show();						} else							Toast.makeText(contexts, "Error", Toast.LENGTH_SHORT).show();					} else if (click_box.equals("premium_high")) {						if (yearlySub != null) {							BillingFlowParams billingFlowParams = BillingFlowParams.newBuilder().setSkuDetails(yearlySub).build();							int responseCode = mBillingClient.launchBillingFlow(contexts, billingFlowParams).getResponseCode();							if (responseCode != BillingClient.BillingResponseCode.OK)								Toast.makeText(contexts, "Error", Toast.LENGTH_SHORT).show();						} else							Toast.makeText(contexts, "Error", Toast.LENGTH_SHORT).show();					} else {						if (yearlySub != null) {							BillingFlowParams billingFlowParams = BillingFlowParams.newBuilder().setSkuDetails(yearlySub).build();							int responseCode = mBillingClient.launchBillingFlow(contexts, billingFlowParams).getResponseCode();							if (responseCode != BillingClient.BillingResponseCode.OK)								Toast.makeText(contexts, "Error", Toast.LENGTH_SHORT).show();						} else							Toast.makeText(contexts, "Error", Toast.LENGTH_SHORT).show();					}					break;				case R.id.freetrial:					watchad();					break;				case R.id.premium_close_btn:					dismiss();					break;			}		}	}}